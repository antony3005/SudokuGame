#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

//FUNÇÃO NOVO JOGO: REINICIA O TABULEIRO E AS VIDAS
void novoJogo(int sudoku[4][4], int *vidas){
	*vidas = 3;
	
	int i, j;
	int tabuleiroNovo[4][4] = {
	    {0, 0, 3, 4},
    	{3, 4, 0, 0},
    	{0, 0, 4, 3},
    	{4, 3, 0, 0}
	};
    
	for(i = 0; i < 4; i++){
		for(j = 0; j < 4; j++){
			sudoku[i][j] = tabuleiroNovo[i][j];
		}
	}
}

//FUNÇÃO VERIFICA LINHA: VERIFICA SE O NÚMERO JÁ EXISTE NESSA LINHA
int verificaLinha(int sudoku[4][4], int linha, int numero){
	int i;
	
	for(i = 0; i < 4; i++){
		if(sudoku[linha][i] == numero){
			return 1;
		}
	}
	return 0;
}

//FUNÇÃO VERIFICA COLUNA: VERIFICA SE O NÚMERO JÁ EXISTE NESSA COLUNA
int verificaColuna(int sudoku[4][4], int coluna, int numero){
	int i;
	
	for(i = 0; i < 4; i++){
		if(sudoku[i][coluna] == numero){
			return 1;
		}
	}
	return 0;
}

//FUNÇÃO VERIFICA BLOCO: VERIFICA SE O NÚMERO JÁ EXISTE NO BLOCO 2X2
int verificaBloco(int sudoku[4][4], int linha, int coluna, int numero){
	int i, j; 
	int blocoLinha;
	int blocoColuna; 
	
	blocoLinha = (linha / 2) * 2; 
	blocoColuna = (coluna / 2) * 2;
 	for(i = blocoLinha; i < blocoLinha + 2; i++){
        for(j = blocoColuna; j < blocoColuna + 2; j++){
            if(sudoku[i][j] == numero){
                return 1;
            }
        }
    }
	return 0;
}

//FUNÇÃO VALIDAR JOGADA: VER SE PODE OU NÃO INSERIR O NÚMERO
int validarJogada(int sudoku[4][4], int linha, int coluna, int numero){
	if(verificaLinha(sudoku, linha, numero)){
		printf("Numero ja existe na linha.\n");
		return 0;
	}
	if(verificaColuna(sudoku, coluna, numero)){
		printf("Numero ja existe na coluna.\n");
		return 0;
	}
	if(verificaBloco(sudoku, linha, coluna, numero)){
		printf("Numero ja existe no bloco.\n");
        return 0;
	}
	return 1;
}

//FUNÇÃO SUDOKU COMPLETO: VERIFICA SE O TABULEIRO JA FOI TODO PREENCHIDO
int sudokuCompleto(int sudoku[4][4]) {
    for(int i = 0; i < 4; i++) {
        for(int j = 0; j < 4; j++) {
            if(sudoku[i][j] == 0) {
                return 0; 
            }
        }
    }
    return 1; 
}

//FUNÇÃO SALVAR JOGO: SALVA O JOGO A CADA JOGADA
void salvarJogo(int sudoku[4][4], int vidas) {
    FILE *arquivo = fopen("sudoku_save.txt", "w");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo para salvar.\n");
        return;
    }

    fprintf(arquivo, "%d\n", vidas);
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            fprintf(arquivo, "%d ", sudoku[i][j]);
        }
        fprintf(arquivo, "\n");
    }

    fclose(arquivo);
    printf("\nJogo salvo com sucesso!\n");
}

//FUNÇÃO CARREGAR JOGO: CONTINUA A PARTIDA DE ONDE PAROU
int carregarJogo(int sudoku[4][4], int *vidas) {
    FILE *arquivo = fopen("sudoku_save.txt", "r");
    if (arquivo == NULL) {
        printf("\nNenhum jogo salvo encontrado.\n");
        return 0;
    }

    fscanf(arquivo, "%d", vidas);
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            fscanf(arquivo, "%d", &sudoku[i][j]);
        }
    }

    fclose(arquivo);
    printf("\nJogo carregado com sucesso!\n");
    return 1;
}

int main(int argc, char *argv[]){
	int opcao, i, j;
	int vidas;
	int linha, coluna, numero;
	int sudoku[4][4];
	
	//MENU DO JOGO
	do{
		printf("SUDOKU\n\n");
		printf("Regras: Um tabuleiro 4x4 deve ser preenchido com numeros de 1 a 4, \nsem que nenhum numero se repita em cada linha, coluna ou quadrado 2x2.\nOs zeros (0) representam casas vazias\n\n");
		printf("1 - Novo jogo\n");
		printf("2 - Continuar\n");
		printf("3 - Sair\n\n");
		printf("Escolha: ");
		scanf("%d", &opcao);
		
		switch(opcao){
			case 1:
				novoJogo(sudoku, &vidas);
				salvarJogo(sudoku, vidas);
				while (vidas > 0 && !sudokuCompleto(sudoku)) {
					//LIMPA TELA
					system ("pause");
					system ("cls");
					
					//EXIBE O TABULEIRO
					printf("SUDOKU\n\n");
					printf("    0   1   2   3\n");
					for(i = 0; i < 4; i++){
						printf("%d ", i);
						for(j = 0; j < 4; j++){
							printf("|");
							if(sudoku[i][j] != 0){
								printf(" %d ", sudoku[i][j]);
							}else{
								printf(" ~ ");	
							}
						}
						printf("\n");
					}
					
					//COLETA OS DADOS
					printf("\n");
				    printf("linha(0 - 3): ");
				    scanf("%d", &linha);
				    printf("coluna(0 - 3): ");
				    scanf("%d", &coluna);
				    printf("Numero(1 - 4): ");
				    scanf("%d", &numero);
				    printf("\n");
					
	                if(validarJogada(sudoku, linha, coluna, numero)){
	                    sudoku[linha][coluna] = numero;
	                    printf("Voce acertou! Numero inserido com sucesso!\n\n");
	                } else {
	                	printf("Tente novamente\n");
           				vidas -= 1;
            			printf("Vidas restantes: %d\n\n", vidas);
	                }
	                salvarJogo(sudoku, vidas);
				}
				if(sudokuCompleto(sudoku)) {
      	  			printf("Parabens! Voce completou o Sudoku!\n");
      	  			system ("pause");
      	  			system ("cls");
    			} else if(vidas == 0) {
        			printf("Game Over! Suas vidas acabaram.\n\n");
        			system("pause");
        			system("cls");
    			}
    			break;
			case 2:
    			if (carregarJogo(sudoku, &vidas)) {
    				system("pause");
    				system("cls");
        			while (vidas > 0 && !sudokuCompleto(sudoku)) {
            			printf("SUDOKU\n\n");
           				for (int i = 0; i < 4; i++) {
                			for (int j = 0; j < 4; j++) {
                   				printf("%d ", sudoku[i][j]);
                			}
                			printf("\n");
            			}
            			
            			printf("\n");
			            printf("linha(0 - 3): ");
			            scanf("%d", &linha);
			            printf("coluna(0 - 3): ");
			            scanf("%d", &coluna);
			            printf("Numero(1 - 4): ");
			            scanf("%d", &numero);

		            if (validarJogada(sudoku, linha, coluna, numero)) {
		                sudoku[linha][coluna] = numero;
		                printf("Voce acertou! Numero inserido com sucesso!\n\n");
		            } else {
		                printf("Jogada invalida. Tente novamente.\n");
		                vidas -= 1;
		                printf("Vidas restantes: %d\n\n", vidas);
		            }
		            salvarJogo(sudoku, vidas);
		        }

		        if (sudokuCompleto(sudoku)) {
		            printf("Parabens! Voce completou o Sudoku!\n");
		        } else if (vidas == 0) {
		            printf("Game Over! Suas vidas acabaram.\n\n");
		        }
			    } else {
			        printf("Voltando ao menu principal...\n");
			        system("pause");
			        system("cls");
			    }
	    		break;
			case 3:
				system ("cls");
				printf("Encerrando...");
				break;
			default:
				printf("\nOpcao invalida!\n");
				system ("pause");
				system ("cls");
		}
	}while(opcao != 3);	
}    
